Enter your name: sabur
Execution Sabur begins  at: 2019-11-15 18:15:53
Now testing toString() for QueueListImpl
****
toString()
first
second
third
****
SUCCESS, add throws a RuntimeException on a FULL QUEUE
java.lang.RuntimeException: Cannot add, full list.
SUCCESS, getFront() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Cannot peek. Empty list.
SUCCESS, getRear() throws a RuntimeException on and EMPTY QUEUE
java.lang.RuntimeException: Cannot peek. Empty list.
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Cannot remove. Empty list.
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Cannot remove. Empty list.
****  Now testing QueueList of Integer ****
SUCCESS, add() throws a RuntimeException on a FULL QUEUE
java.lang.RuntimeException: Cannot add, full list.
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Cannot remove. Empty list.
SUCCESS, getRear() throws a RuntimeException on and EMPTY QUEUE
java.lang.RuntimeException: Cannot peek. Empty list.
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Cannot remove. Empty list.
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Cannot remove. Empty list.
SUCCESS, getRear() throws a RuntimeException on and EMPTY QUEUE
java.lang.RuntimeException: Cannot peek. Empty list.
SUCCESS, remove() throws a RuntimeException on an EMPTY QUEUE
java.lang.RuntimeException: Cannot remove. Empty list.
Testing toString()
SUCCESS QueueTesting PASSES
SUCCESS Queue Testing Complete
Execution Sabur ends  at: 2019-11-15 18:15:53



Enter your name: Sabur
Execution begins for Sabur  at: 2019-11-15 18:16:54
SUCCESS, push should throw a RuntimeException on a full stack
java.lang.RuntimeException: Cannot add, full list.
*****
toString() of s1: 
third
second
first
*****
SUCCESS, pop throws a RuntimeException on an empty stack
java.lang.RuntimeException: Cannot remove. Empty list.
****  Now testing Stack<Integer>****
SUCCESS, push should throw a RuntimeException on a full stack
java.lang.RuntimeException: Cannot add, full list.
SUCCESS, pop throws a RuntimeException on an empty stack
java.lang.RuntimeException: Cannot remove. Empty list.
SUCCESS, peek throws a RuntimeException on an empty stack
java.lang.RuntimeException: Cannot peek. Empty list.
SUCCESS StackTesting PASSES

-----SUCCESS Stack Linked List Testing Complete -----

SUCCESS, push should throw a RuntimeException on a full stack
java.lang.RuntimeException: Cannot remove. Empty list.
*****
toString() of s1: 
third
second
first
*****
SUCCESS, pop throws a RuntimeException on an empty stack
java.lang.RuntimeException: Cannot remove. Empty list.
****  Now testing Stack<Integer>****
SUCCESS, push should throw a RuntimeException on a full stack
java.lang.RuntimeException: Cannot remove. Empty list.
SUCCESS, pop throws a RuntimeException on an empty stack
java.lang.RuntimeException: Cannot remove. Empty list.
SUCCESS, peek throws a RuntimeException on an empty stack
java.lang.RuntimeException: Cannot remove. Empty list.
SUCCESS StackTesting PASSES

-----SUCCESS Stack Array List Testing Complete -----

Execution ends for Sabur  at: 2019-11-15 18:16:54


package stack;

public class StackListLinkedListImpl<T> implements StackList<T> {
	
	private int count;
	private Node <T> first;
	private Node <T> last;
	private int max_size;
	
	public StackListLinkedListImpl() //default constructor 
	{
		this.count =0;
		this.first=null;
		this.last = null;
		this.max_size = DEFAULT_MAX_SIZE;
	}
	
	public StackListLinkedListImpl(int maxSize) //2nd default constructor
	{
		if(maxSize>=0 && maxSize  <= LARGEST)
		{
			this.max_size = maxSize;
		}
		else
		{
			this.max_size = DEFAULT_MAX_SIZE;
		}
	}
	public String toString()
	{
		String temp ="";
		Node <T> current = this.first;
		while(current!= null)
		{
			temp += current.data.toString() + "\n";
			current = current.link;
		}
		return temp;
	}
	 /**receives: nothing
     *  task:  tests to see if the Stack has 0 elements
     *  returns: true if this StackList is empty (has 0 elements) false otherwise;
     */
	public boolean isEmpty()
	{
		if(this.first==null)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	/** receives: nothing
	 * returns: number of elements on this StackList (always <= to getMaxSize())
	 */
	  public int getSize()
	  {
		  return this.count;
	  }
	/**receives: nothing
	   *  task:  tests to see if this StackList instance has getMaxSize() elements 
	   *  returns: true if this StackList is full (has getMaxSize() elements) false otherwise;
	*/
	  public boolean isFull()
	  {
		  if(this.count == getMaxSize())
		  {
			  return true;
		  }
		  else
		  {
			  return false;
		  }
	  }
	  
	  /** receives: nothing
	   * returns: max number of elements allowed on this StackList (always <= to getMaxSize())
	   */
	   public int getMaxSize()
	   {
		   return this.max_size;
	   }

	   /** receives: element to place on top of this StackList
	    * task: received element is on top of this StackList instance if it is not full
	    * returns: nothing
	    *@throws RuntimeException if this StackList is full (has max size elements already)
	    */
	   public void push(T element)
	   {
		   if(this.isFull())
		   {
			   throw new RuntimeException("Cannot add, full list.");
		   }
		   Node <T> node = new Node<T>(element);
		   node.link = this.first;
		   first=node;
		   this.count++;
	   }
	
	   /** receives: nothing
	   returns:  removes AND returns the top item from this StackList if  it is NOT empty. 
	 * @throws - RuntimeException if attempt to pop an empty StackList
	 */
	   public T pop()
	   {
		   if(this.isEmpty())
		   {
			   throw new RuntimeException("Cannot remove. Empty list.");
		   }
		   Node<T> current = this.first;
		   first = first.link;
		   count--;
		   return current.data;
	   }
	   
	   /** receives: nothing
	    *returns the top item from this StackList  if it is
	   *         not empty.  DOES NOT POP IT.
	   * @throws - RuntimeException if attempt to peek at an empty StackList instance
	   */
	   public T peek()
	   {
		   if(this.isEmpty())
		   {
			   throw new RuntimeException("Cannot peek. Empty list.");
		   }
		   Node<T> current = this.first;
		   return current.data;
	   }
	   /**receives: nothing
	    returns: nothing
	    task:  removes all items from this StackList, making it empty.
	 */
	   public void clear()
	   {
		   this.first=null;
		   this.count=0;
	   }
	   
	   
	   
	   
	   
	/** a typical node class for a linked list
	 * single traditional linked list node
	 * templated to hold any object-based type
	 * @author LJBaker
	 *
	 * @param <T> the object based type stored in the node
	 * all data is public as this is used internally by a linked list
	 * never used in any public sense
	 */

	private class Node<T>
	{

	    public T data; 
	    public Node<T> link;

	    //default constructor 
	    public Node()
		{
		    this.data = null;
		    this.link = null;
		}//end of constructor

	    public Node(T theData)
		{
		    this.data = theData;
		    this.link = null;
		}

	    public Node(Node<T> theLink)
		{
		    this.data = null;
		    this.link = theLink;
		}

	    public Node(T theData, Node<T> theLink)
		{
		    this.data = theData;
		    this.link = theLink;
		}

	}//End of Node<T> public class. 
}






package queue;


public class QueueListLinkedListImpl<T> implements QueueList<T> {
	private int count;
	private Node <T> first;
	private Node <T> last;
	private int max_size;
	
	public QueueListLinkedListImpl() //default constructor
	{
		this.count =0;
		this.first=null;
		this.last = null;
		this.max_size = DEFAULT_MAX_SIZE;
	}
	public QueueListLinkedListImpl(int maxSize) // second constructor to test max size
	{
		if(maxSize>=0 && maxSize  <= LARGEST)
		{
			this.max_size = maxSize;
		}
		else
		{
			this.max_size = DEFAULT_MAX_SIZE;
		}
	}
	public String toString()
	{
		String temp ="";
		Node <T> current = this.first;
		while(current!= null)
		{
			temp += current.data.toString() + "\n";
			current = current.link;
		}
		return temp;
	}
	
	/** receives: nothing
	 *  task:  tests to see if this QueueList has 0 elements
	 *  returns: true if this QueueList is empty (has 0 elements) false otherwise;
	 */
	 public boolean isEmpty()
	 {
		if(this.count==0)
		{
			return true;
		}
		else
		{
			return false;
		}
	 }
	 /**receives: nothing
	  *  task:  tests to see if this StackList instance has getMaxSize() elements 
	  *  returns: true if this StackList is full (has getMaxSize() elements) false otherwise;
	*/
	public boolean isFull() 
	{
		if (this.count == getMaxSize()) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	/** receives: nothing
	 * returns: number of elements on this StackList (always <= to getMaxSize())
	 */
	public int getSize()
	{
		return this.count;
	}
	 /** receives: nothing
	 * returns:  max allowable number of elements in this QueueList
	 */
	public int getMaxSize()
	{
		return this.max_size;
	}
	/** places item at the REAR of this QueueList
	 *receives: nothing
	 * returns: nothing
	 * task:  element is placed at the REAR or END of this QueueList if it is NOT full
	 *throws: RuntimeException if this QueueList is full
	 */
	public void add(T element)
	{
		if(this.isFull())
		{
			throw new RuntimeException("Cannot add, full list.");
		}
		Node<T> node = new Node<T>(element);
		if(this.isEmpty())
		{
			this.first=node;
			this.last=node;
			this.count++;
		}
		else
		{
			last.link = node;
			this.last= node;
			this.count++;
		}
	}
	/** receives: nothing
	   returns:  removes and returns the FRONT item from this QueueList if it is NOT empty
	 * @throws - RuntimeException if attempt to remove from an empty QueueList
	
	 */
	public T remove()
	{
		if(this.isEmpty())
		{
			throw new RuntimeException("Cannot remove. Empty list.");
		}
		Node<T> current = this.first;
		first = first.link;
		count--;
		return current.data;
	}
	/** receives: nothing
	 * returns: the FRONT item from this QueueList if it is
	 * not empty.  DOES NOT REMOVE IT.
	 * @throws - RuntimeException if this QueueList is empty.
	 */
	 public T getFront()
	 {
		 if(this.isEmpty())
		 {
			 throw new RuntimeException("Cannot peek. Empty list.");
		 }
		 Node<T> current = this.first;
		 return current.data;
	 }
	 /** receives: nothing
		 * returns: the REAR (or last)  item from this QueueList if it is
		 *      not empty.  DOES NOT REMOVE IT.
		 * @throws - RuntimeException if this QueueList is empty.
		 */
	 public T getRear()
	 {
		 if(this.isEmpty())
		 {
			 throw new RuntimeException("Cannot peek. Empty list.");
		 }
		 Node<T> current = this.last;
		 return current.data; 
	 }
	 /** receives: nothing
	    task: removes all items from this QueueList making it empty.
	    returns: nothing
	 */
	 public void clear()
	 {
		 this.first=null;
		 this.count=0;
	 }
	
	private class Node<T>
	{

	    public T data; 
	    public Node<T> link;

	    //default constructor 
	    public Node()
		{
		    this.data = null;
		    this.link = null;
		}//end of constructor

	    public Node(T theData)
		{
		    this.data = theData;
		    this.link = null;
		}

	    public Node(Node<T> theLink)
		{
		    this.data = null;
		    this.link = theLink;
		}

	    public Node(T theData, Node<T> theLink)
		{
		    this.data = theData;
		    this.link = theLink;
		}

	}//End of Node<T> public class. 
}





package stack;

import java.util.ArrayList;

public class StackListArrayListImpl<T> implements StackList<T>{
	
	private int max_size;
	private ArrayList<T> list;
	
	public StackListArrayListImpl() //default constructor 
	{
		this.max_size = DEFAULT_MAX_SIZE;
		this.list = new ArrayList<T>(DEFAULT_MAX_SIZE);
	}
	
	public StackListArrayListImpl(int maxSize) //2nd default constructor
	{
		if(maxSize>=0 && maxSize  <= LARGEST)
		{
			this.max_size = maxSize;
		}
		else
		{
			this.max_size = DEFAULT_MAX_SIZE;
		}
		this.list = new ArrayList<T>(max_size);
	}
	public String toString()
	{
		String temp ="";
		for(int index=list.size()-1; index>=0;index--)
		{
			temp+= list.get(index) + "\n";
		}
		return temp;
	}
	
	   /**receives: nothing
     *  task:  tests to see if the Stack has 0 elements
     *  returns: true if this StackList is empty (has 0 elements) false otherwise;
     */
	public boolean isEmpty()
	{
		if(list.size()==0)
		{
			return true;
		}
		else {
			return false;
		}
	}
	/**receives: nothing
	   *  task:  tests to see if this StackList instance has getMaxSize() elements 
	   *  returns: true if this StackList is full (has getMaxSize() elements) false otherwise;
	*/
	 public boolean isFull()
	  {
		  if(list.size()== getMaxSize())
		  {
			  return true;
		  }
		  else {
			  return false;
		  }
	  }
	 /** receives: nothing
	  * returns: number of elements on this StackList (always <= to getMaxSize())
	  */
	 public int getSize()
	 {
		 int size = list.size();
		 return size;
	 }
	 /** receives: nothing
	  * returns: max number of elements allowed on this StackList (always <= to getMaxSize())
	  */
	 public int getMaxSize()
	 {
		  return this.max_size;
	 }

	 /** receives: nothing
	  * returns: max number of elements allowed on this StackList
	  *
	   public int getMaxSize();

	 /** receives: element to place on top of this StackList
	  * task: received element is on top of this StackList instance if it is not full
	  * returns: nothing
	  *@throws RuntimeException if this StackList is full (has max size elements already)
	  */
	  public void push(T element)
	  {
		  if(this.isFull())
		  {
			  throw new RuntimeException("Cannot remove. Empty list.");
		  }
		  else
		  {
			  list.add(element);
		  }
		  
	  }

	 /** receives: nothing
	    returns:  removes AND returns the top item from this StackList if  it is NOT empty. 
	  * @throws - RuntimeException if attempt to pop an empty StackList
	  */
	  public T pop()
	  {
		  if(this.isEmpty())
		  {
			  throw new RuntimeException("Cannot remove. Empty list.");
		  }
		  else
		  {
			  return list.remove(list.size()-1);
		  }
	  }

	 /** receives: nothing
	   *returns the top item from this StackList  if it is
	  *         not empty.  DOES NOT POP IT.
	  * @throws - RuntimeException if attempt to peek at an empty StackList instance
	  */
	  public T peek()
	  {
		  if(this.isEmpty())
		  {
			  throw new RuntimeException("Cannot remove. Empty list.");
		  }
		  else
		  {
			  return list.get(list.size()-1);
		  }
	  }

	 /**receives: nothing
	     returns: nothing
	     task:  removes all items from this StackList, making it empty.
	  */
	  public void clear()	
	  {
		  list.clear();
	  }
	 
}

